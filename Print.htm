<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Printing in broken printer</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      background-color: #f5f5f5;
    }
    h1 {
      margin-bottom: 20px;
    }
    input {
      width: 50%;
      padding: 15px;
      font-size: 32px;
      border: 2px solid #ccc;
      border-radius: 5px;
      text-align: center;
    }
    input:focus {
      outline: none;
      border-color: #007bff;
    }
    .result {
      margin-top: 20px;
      font-size: 32px;
      color: #333;
      text-align: center;
    }
  </style>
</head>
<body>
  <input id="numberInput" type="number" placeholder="Enter the number of pages here (up to millions) and press Enter." />
  <div class="result" id="result"></div>

  <script>
    // Function to find exactly 4 square numbers summing to the given integer
    function findSquareNumbers(n) {
      if (n <= 0) return [];

      const squares = [];
      for (let i = 0; i * i <= n; i++) {
        squares.push(i * i);
      }

      // Helper function to find the numbers recursively
      function findCombination(target, count, current) {
        if (target === 0 && current.length === count) {
          return current;
        }
        if (current.length >= count || target < 0) {
          return null;
        }

        for (let i = 0; i < squares.length; i++) {
          const next = findCombination(target - squares[i], count, [...current, squares[i]]);
          if (next) {
            return next;
          }
        }

        return null;
      }

      // Try combinations with exactly 4 squares
      const result = findCombination(n, 4, []);
      if (result) {
        // Return the square roots in descending order
        return result.map(Math.sqrt).sort((a, b) => b - a);
      }

      return [];
    }

    // Event listener for input
    document.getElementById("numberInput").addEventListener("keypress", function (e) {
      //console.log("AAA")
      if (e.key === "Enter") {
        console.log("BBBB")
        const input = parseInt(this.value, 10);
        if (!isNaN(input)) {
          const roots = findSquareNumbers(input).filter(num => num > 0);
          console.log(roots)
          const resultDiv = document.getElementById("result");
          const equation = roots
              .map((num, i) => `${num}<sup>2</sup>`)
              .join(" + ");
            resultDiv.innerHTML = `You only need to print ${roots.length} times, since ${input} = ${equation}`;
        }
      }
    });
  </script>
</body>
</html>
